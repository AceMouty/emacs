* Doom 

** Doom Modeline
#+begin_src emacs-lisp
  ;; Doom Modeline
  (use-package doom-modeline
     :ensure t
     :init (doom-modeline-mode 1))
#+end_src

** Doom Themes
#+begin_src emacs-lisp
;; Doom Themes
(use-package doom-themes
  :ensure t
  :config
  ;; Set Theme
  (load-theme 'doom-outrun-electric t))
#+end_src


* Evil Mode
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-tutor)
#+end_src

* Dashboard

** All The Icons
#+begin_src emacs-list
;; NOTE: The first time you load your configuration on a new machine, you'll
;; need to run the following command interactively so that mode line icons
;; display correctly:
;;
;; M-x all-the-icons-install-fonts

(use-package all-the-icons)
#+end_src

** Page Break
#+begin_src emacs-lisp
;; Page breaks
(use-package page-break-lines
  :ensure t
  :config
  (page-break-lines-mode))
#+end_src

** Emacs Dashboard
#+begin_src emacs-lisp
;; Emacs Dashboard
;(use-package dashboard
;  :ensure t
;  :init
;  (setq dashboard-center-content t)
;  (setq dashboard-banner-logo-title "AceMacs!")
;  (setq dashboard-startup-banner 'logo)
;  (setq dashboard-set-heading-icons t)
;  (setq dashboard-set-file-icons t)
;  (setq dashboard-items '((recents . 5)))
;;			  (projects . 5)))
;  :config
;  (dashboard-setup-startup-hook))
#+end_src


* Base Packages

** Ivy
#+begin_src emacs-lisp
;; Install Ivy completion framework
(use-package ivy
  :diminish ;<-- remove mode from emacs bar

  ;; Custom bindings in different states for Ivy
  :bind (
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :after (ivy)
  :config (counsel-mode 1))
#+end_src

** Ivy Rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :after (ivy counsel)
  :config
  (ivy-rich-mode 1))
#+end_src

** Swipper
#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :after (ivy)
  :bind
  ("C-s" . swiper))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode 1))

(use-package counsel-projectile
  :ensure t
  :after (projectile)
  :config
  (counsel-projectile-mode))
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  :hook (after-init . global-company-mode))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-j") #'company-select-next)
  (define-key company-active-map (kbd "C-k") #'company-select-previous))

(use-package company-box
  :ensure t
  :config
  :hook (company-mode . company-box-mode))
#+end_src

** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :bind
  ("C-c l" . lsp-keymap-prefix)
  :hook ((rjsx-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands
  lsp)

(use-package lsp-ui
  :ensure t
  :commands
  lsp-ui-mode)

(use-package lsp-ivy
  :ensure t
  :commands
  lsp-ivy-workspace-symbol)
#+end_src

** Emmet
#+begin_src emacs-lisp
;; Emmit
(use-package emmet-mode
  :ensure t
  :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
)
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Rainbow Brackets
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Impatient
#+begin_src emacs-lisp
(use-package impatient-mode
  :ensure t)
#+end_src

* Programming

** Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src

** JavaScript / React
#+begin_src emacs-lisp 
;(use-package rjsx-mode
;  :ensure t
;  :mode "\\.js\\'")
#+end_src
